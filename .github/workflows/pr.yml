name: Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # Job 1: Validate PR
  validate-pr:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Check PR title
      run: |
        echo "üìù Checking PR title format..."
        # PR titles should follow conventional commits format
        # Example: feat: add user authentication
        # Example: fix: resolve cart calculation bug
        # Example: docs: update README
        
    - name: Check PR description
      run: |
        echo "üìã Checking PR description..."
        # PR should have a description explaining changes
        
    - name: Check for breaking changes
      run: |
        echo "‚ö†Ô∏è Checking for breaking changes..."
        # Look for BREAKING CHANGE in commit messages
        
    - name: Validate commit messages
      run: |
        echo "üìù Validating commit messages..."
        # Check if commits follow conventional commit format

  # Job 2: Code Review Checklist
  code-review:
    name: Code Review Checklist
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for TODO/FIXME comments
      run: |
        echo "üîç Checking for TODO/FIXME comments..."
        if grep -r "TODO\|FIXME" app/ config/ db/; then
          echo "‚ö†Ô∏è Found TODO/FIXME comments. Please address them before merging."
          exit 1
        fi
        
    - name: Check for console.log statements
      run: |
        echo "üîç Checking for console.log statements..."
        if find . -name "*.js" -o -name "*.ts" | xargs grep -l "console\.log"; then
          echo "‚ö†Ô∏è Found console.log statements. Please remove them before merging."
          exit 1
        fi
        
    - name: Check for hardcoded secrets
      run: |
        echo "üîç Checking for hardcoded secrets..."
        # Check for actual hardcoded secrets (not legitimate Rails field names)
        if grep -r "password\s*=\s*['\"][^'\"]*['\"]" app/ config/ --exclude-dir=secrets; then
          echo "‚ö†Ô∏è Found potential hardcoded passwords. Please use environment variables."
          exit 1
        fi
        if grep -r "secret\s*=\s*['\"][^'\"]*['\"]" app/ config/ --exclude-dir=secrets; then
          echo "‚ö†Ô∏è Found potential hardcoded secrets. Please use environment variables."
          exit 1
        fi
        if grep -r "api_key\s*=\s*['\"][^'\"]*['\"]" app/ config/ --exclude-dir=secrets; then
          echo "‚ö†Ô∏è Found potential hardcoded API keys. Please use environment variables."
          exit 1
        fi
        
    - name: Check for large files
      run: |
        echo "üîç Checking for large files..."
        echo "Current directory contents:"
        ls -la
        echo "Checking for files larger than 1MB..."
        
        # Check for large files, excluding common directories that shouldn't be tracked
        LARGE_FILES=$(find . -size +1M -not -path "./.git/*" -not -path "./vendor/*" -not -path "./node_modules/*" -not -path "./tmp/*" -not -path "./log/*" -not -path "./coverage/*" -not -path "./public/assets/*" -not -path "./.bundle/*" -not -name "rspec-results.json" -not -name "security-report.json" 2>/dev/null || true)
        
        if [ -n "$LARGE_FILES" ]; then
          echo "‚ö†Ô∏è Found large files. Please optimize or use Git LFS."
          echo "Large files found:"
          echo "$LARGE_FILES"
          echo "File sizes:"
          ls -lh $LARGE_FILES
          exit 1
        else
          echo "‚úÖ No large files found."
        fi

  # Job 3: Performance Checks
  performance:
    name: Performance Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.6.10
        bundler-cache: true
        
    - name: Install dependencies
      run: |
        bundle config path vendor/bundle
        bundle install --jobs 4 --retry 3
        
    - name: Check for N+1 queries
      run: |
        echo "üîç Checking for potential N+1 queries..."
        # This would typically use tools like bullet gem
        echo "N+1 query detection would run here"
        
    - name: Check for slow queries
      run: |
        echo "üîç Checking for slow queries..."
        # This would analyze query performance
        echo "Slow query detection would run here"
        
    - name: Check for memory leaks
      run: |
        echo "üîç Checking for memory leaks..."
        # This would analyze memory usage patterns
        echo "Memory leak detection would run here"

  # Job 4: Documentation Check
  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for updated README
      run: |
        echo "üìö Checking documentation..."
        if [ -f "README.md" ]; then
          echo "‚úÖ README.md exists"
        else
          echo "‚ùå README.md is missing"
          exit 1
        fi
        
    - name: Check for API documentation
      run: |
        echo "üìö Checking API documentation..."
        # Check if API endpoints are documented
        
    - name: Check for code comments
      run: |
        echo "üìö Checking code comments..."
        # Check if complex code has comments

  # Job 5: Security Review
  security-review:
    name: Security Review
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 2.6.10
        bundler-cache: true
        
    - name: Install dependencies
      run: |
        bundle config path vendor/bundle
        bundle install --jobs 4 --retry 3
        
    - name: Run security scan
      run: |
        echo "üîí Running security scan..."
        bundle exec brakeman --format json --output security-report.json --exit-on-warn || true
        bundle exec bundle-audit check --update || true
        
    - name: Check for SQL injection
      run: |
        echo "üîí Checking for SQL injection vulnerabilities..."
        # This would scan for potential SQL injection points
        
    - name: Check for XSS vulnerabilities
      run: |
        echo "üîí Checking for XSS vulnerabilities..."
        # This would scan for potential XSS points
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.json
